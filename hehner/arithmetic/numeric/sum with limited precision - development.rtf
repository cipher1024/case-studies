{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 This note is written as a response to a presentation a former professor of mine (which I respect very much) did, back in Sherbrooke, in 2006.  His position was that computing was an experimental science and one of his supporting example was the imprecision of floating point arithmetic.  I will now develop formally a summation routine that works with floating point numbers, which is the example he presented.  In a very funny way, he also presented a way to minimize (maybe, due to the lack of support that he actually finds a minimum, I should say decrease) the error produced while adding.  I think it is a well known fact that floating point arithmetic is imprecise and I think we can be very precise in the description of this imprecision.  \
\
There ought to be some properties on which we may rely even though full precision is attained otherwise, using a random number generator or an addition would give the same expectations to the user.  }