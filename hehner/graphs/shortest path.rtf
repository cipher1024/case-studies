{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10840\viewh8900\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Dijkstra's Algorithm using Hehner's calculus\
\
The goal of Dijstra's algorithm is to compute a function mapping to every vertices of a graph the minimum distance from some source to it.  We can capture that using two properties.\
\
R1:	( A x:  x is reachable:  ( A p:  s -> p <- x is a path:  d.x \uc0\u8804  w.( s -> p <- x ) )\
R2:	( A x:  x is reachable:  ( E p:  s -> p <- x is a path:  d.x = w.( s -> p <- x ) )\
\
It is shorter, though, to use the quantified arrow for that.\
\
R3:	( A x:  x is reachable:  d.x = ( 
\f1 \uc0\u8595 
\f0  p:  p is a path between s and x:  w.p ) )\
\
Let's start trying to use R3 to compute our algorithm.  A common technique to find an invariant is to replace a constant by a variable and to build the algorithm on the idea that we somehow get the variable closer to the constant.  The notion of reachability could be taken as such a constant.  More precisely, we will consider it as a predicate true only for the vertices reachable from s and we will call it r.  Its approximation will be called t.  The loop terminates when r = t.  Therefore, our first invariant is:\
\
J1:	( A x:  t.x:  d.x = ( 
\f1 \uc0\u8595 
\f0  p:  p is a path between s and x:  w.p ) )\
\
A reasonable step for progress would be to add a vertex y which is reachable and not in t.  For now, we will choose any y such that:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 G1:	y is reachable\
G2:	\'ac t.y\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
Also, for brevity, we will use a shorthand instead of the quantified minimum.\
\
(0)	m.x = ( 
\f1 \uc0\u8595 
\f0  p:  p is a path between s and x:  w.p )\
\
J1 becomes:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 J1:	( A x:  t.x:  d.x = m.x )\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
S1:	( A x:  x \uc0\u8800  y:  t'.x = t.x )\
S2:	t'.y = true\
	S3:	( A x:  x \uc0\u8800  y:  d'.x = d.x )\
	S4:	d'.y = c\
\
Let's now see if S1 and S2 guarded by G1 and G2 preserve J1.\
\
(1)		J1'\
	=		\{ Excluded middle;  Heading for a case analysis on x \}\
		( A x:  ( x \uc0\u8800  y \\/ x = y ) /\\ t'.x:  d'.x = m.x )\
	=		\{ Splitting \}\
		( A x:  x \uc0\u8800  y /\\ t'.x:  d'.x = m.x ) /\\ ( t'.y   ==>   d'.y = m.y )\
			\{ 	S1:	( A x:  x \uc0\u8800  y:  t'.x = t.x ) \
	=			and S3: ( A x:  x \uc0\u8800  y:  d'.x = d.x ) \
				then J1 \}\
		t'.y   ==>   d'.y = m.y\
	=		\{ 	S2:  t'.y = true\
				and S4:  d'.y = c \}\
		c = m.y\
	=	G3\
\
We introduced two statements to get rid of the primed variables and we had to introduce a guard to make one of the statements simple.  Therefore, we have a pair of constants that come out of the blues.  Basically, they fit in the program as the next vertex for which we know the cost of the shortest path starting at s.  For now, the program has unbounded nondeterminism in it but it should disappear shortly.\
\
}