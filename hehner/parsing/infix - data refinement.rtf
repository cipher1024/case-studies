{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww8640\viewh8700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Refinement\
\
As mentioned at the end of the development of the acceptor for infix expression, the variables are in no way meant to be stored as they are.  If they are a suitable data representation, good! but they merely reflect a choice of what to name and what should be left unnamed for the clarity of the exposition.  We will now attempt the creation of a more efficient data structure.  Instead of changing two sequences, we will iterate through an array representing S.  Therefore, we replace the variables x and z for an array f, its length n and the current location i.  As a consequence, it is expected that w and y will no longer be needed.  We start with an hypothesis binding f and n to S.  (We shall refer to the theorems of the development by prefixing their number with 'D.')\
\
(0)	S = f (0 .. n)\
(1)	i \uc0\u8804  j   ==>   g ( j .. i ) = []\
(2)	g ( i .. i+1 ) = [ g.i ]\
(3)	i \uc0\u8804  j \u8804  k  ==>  g ( i .. k )  =  g ( i .. j ) ++ g ( j .. k )\
\
We want to start i with 0 so we will see what relation is necessary to relate it at first with x and z.\
\
P11:	i = 0\
\
(4)		P5\
	=		\{ (1) \}\
		x = f ( 0..0 )\
	=		\{ P11 \}\
		x = f ( 0..i )\
	=	J4\
\
(5)		P10\
	=		\{ (0) \}\
		z = f ( 0 .. n )\
	=		\{ P11 \}\
		J5\
\
We call J4 a glueing invariant.  It we should have one strong enough that the implementation does not have to mention abstract variables anymore.  We will now study how to enforce invariant J4 and J5.\
\
(6)		J4'\
	=		\{ Expand \}\
		x' = f ( 0 .. i' )\
	=		\{ P2 \}\
		x <- y = f ( 0 .. i' )\
	=		\{ J4 \}\
		f ( 0 .. i ) <- y = f ( 0 .. i' )\
	=		\{ G4:	y = f.i \}\
		f ( 0 .. i ) <- f.i = f ( 0 .. i' )\
	=		\{ (2) and (3) \}\
		f ( 0 .. i + 1 ) = f ( 0 .. i' )\
	=		\{ P12: i' = i + 1 \}\
		
\b true
\b0 \
\
(7)		J5'\
	=		\{ Expand \}\
		z' = f ( i' .. n )\
	=		\{ P8 and P12 \}\
		w = f ( i + 1 .. n )\
	=	G5\
\
And now for the termination condition:\
\
(8)		G3\
	=		\{ G4 and G5 \}\
		f.i -> f ( i + 1 .. n ) = z\
	=			\{ (3) \}\
		f ( i .. n ) = z\
	=	J5\
	\
(9)		z \uc0\u8800  []\
	=		\{ J5 \}\
		f ( i .. n ) \uc0\u8800  []\
	=		\{ (1) \}\
		i < n\
\
And finally, let's re-express the guards of the conditional statement.\
\
(10)		G1\
	=		\{ Expand \}\
		y = word\
	=		\{ G4 \}\
		f.i = word\
	=	G6\
\
(11)		G2\
	=		\{ Expand \}\
		y = op\
	=		\{ G4 \}\
		f.i = op\
	=	G7\
\
removing the variables x and z and the local constant y and w, we obtain the following program:\
\
	  i, c, d := 0, 
\b false
\b0 , 
\b true
\b0 \
	; 
\b while
\b0  i 
\fs26 < n 
\b do
\b0 \
		   
\b if
\b0  f.i = word -> \
			c, d := d, 
\b false
\b0 \
		   [] f.i = op -> \
			c, d := 
\b false
\b0 , c\
		   
\b fi
\b0 \
		|| i := i + 1\
	  
\b od}