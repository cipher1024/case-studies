{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww8900\viewh7380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Let's now venture out of the realm of regular languages and add nested pairs of brackets in our language.  We have to change our alphabet for that and we will use `bo' for opening bracket and `bc' for closing bracket.  We will first list the postulates describing the new alphabet.\
\
(0)	y = op   \\/   y = word   \\/   y = bo   \\/   y = bc	("Alphabet")\
\
	("Token disjointedness")\
(1)		( y = op  /\\  y = word   ==   
\b false 
\b0 )\
	/\\	( y = op  /\\  y = bo   ==   
\b false
\b0  ) \
	/\\	( y = op  /\\  y = bc   ==   
\b false
\b0  )\
	/\\	( y = word  /\\  y = bo   ==   
\b false 
\b0 )\
	/\\	( y = word  /\\  y = bc   ==   
\b false 
\b0 )\
	/\\	( y = bo  /\\  y = bc   ==   
\b false 
\b0 )
\b 		
\b0 \
\
Postulate (1) seems a bit big but looking up each clause would steal too much attention from the proof at hand.  We now need to define predicates to classify the different stages of reading a string.  The main difference here will be that we will keep a counter to keep track of the opening braces and to accept only if the counter is zero.  Here are a description of the three possible states:\
\
L1:	Well formed expression\
L2:	last subexpression complete\
L3:	ready for a new subexpression\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 To integrate the braces, we add the rules for addition and continuation.  An opening bracket can only be added when a expecting a new subexpression can (L3) and a subexpression is still expected afterwards.  A closing bracket can only be integrated when the last subexpression read is complete and it is considered that the last subexpression read is complete afterwards.  \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
(2)	L1.x   ==   L2.0.x\
\
	("State disjointedness")\
(3)	\'ac n > 0   \\/   \'ac L1.x  \\/  \'ac L2.n.x\
(4)	\'ac L1.x  \\/  \'ac L3.n.x\
(5)	n = m   \\/  \'acL2.n.x  \\/  \'acL2.m.x\
(6)	n = m   \\/  \'acL3.n.x  \\/  \'acL3.m.x\
(7)	\'acL2.n.x  \\/  \'acL3.m.x\
\
	("Initially")\
(8)	L3.0.[]\
\
	("Transitions")\
(9)	L3.n.( x <- word )   ==   
\b false
\b0 \
(10)	L3.n.( x <- op )   ==   L3.n.x \\/ L2.n.x\
(11)	L3.(n+1).( x <- bo )   ==   L3.n.x\
(12)	L3.n.( x <- bc )   ==   
\b false
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 (13)	L2.n.( x <- word )   ==   L3.n.x\
(14)	L2.n.( x <- op )   ==   
\b false
\b0 \
(15)	L2.n.( x <- bo )   ==   
\b false
\b0 \
(16)	L2.(n+1).( x <- bc )   ==   L2.n.x\
\
So far so good.  We will keep the same scheme of variables used so far and use n as a new one.  We will now build a loop around  the following invariants.\
\
J6:	c = L2.n.x \
J7:	d = L3.n.x\
\
(17)		J6'\
	=		\{ P2 \}\
		c' = L2.n'.(x <- y)\
	=		\{ Alphabet \}\
			( y = op  /\\  c' = L2.n'.( x <- op ) )\
		\\/	( y = word  /\\  c' = L2.n'.( x <- word ) )\
		\\/	( y = bo  /\\  c' = L2.n'.( x <- bo ) )\
		\\/	( y = bc  /\\  c' = L2.n'.( x <- bc ) )\
	=		\{ see below \}\
		K1 \\/ K2 \\/ K3 \\/ K4\
\
K1:	y = op  /\\  c' = L2.n'.( x <- op )\
K2:	y = word  /\\  c' = L2.n'.( x <- word )\
K3:	y = bo  /\\  c' = L2.n'.( x <- bo )\
K4:	y = bc  /\\  c' = L2.n'.( x <- bc )\
\
(18)		K1\
	=		\{ (14) \}\
		y = op /\\ c' = 
\b false\
	
\b0 =	Q6\
\
(19)		K2\
	=		\{ (13) \}\
		y = word /\\ c' = L3.n'.x\
	=		\{ Q7:  n' = n; heading for J7 \}\
		y = word /\\ c' = L3.n.x\
	=		\{ J7 \}\
		y = word /\\ c' = d\
	=	Q8\
\
(20)		K3\
	=		\{ (16) \}\
		y = bo /\\ c' = 
\b false
\b0 \
	=	Q9\
\
(21)		K4\
	=		\{ Q10:  n' = n + 1; heading for (17) \}\
		y = bc /\\ c' = L2.( n+1 ).(x <- bc)\
	=		\{ (17) \}\
		y = bc /\\ c' = L2.n.x\
	=		\{ J6 \}\
		y = bc /\\ c' = c\
	=	Q11\
\
We should now think of putting everything together.  The naive approach:\
\
(22)		J6'\
	=		\{ (17) \}\
		K1 \\/ K2 \\/ K3 \\/ K4\
	=		\{ (18), (19), (20), (21) with assumptions J6, J7, P2, Q7, Q10 \}\
		Q6 \\/ Q8 \\/ Q9 \\/ Q11\
\
will not work because Q7 and Q10 contradict each other.  It is necessary to integrate Q7 with Q8 and Q10 with Q11 in such a way that we obtain a conditional which, put together with J6 and J7, implies J6'.\
\
(A)		J7 /\\ Q7   ==>   ( K2 == Q8 ) \
	=		\{ Shunting yard \}\
		J7   ==>   ( Q7   ==>   " ( K2 == Q8 ) " )\
	==>		\{ Propositional calculus \}\
		J7   ==>   " ( Q7   ==>   ( Q8 ==> K2 ) ) "\
	=		\{ Shunting yard \}\
		J7   ==>   ( Q7 /\\ Q8   ==>   K2 )\
	=		\{ Shunting yard \}\
		J7 /\\ Q7 /\\ Q8   ==>  K2\
\
(B)		Q10 /\\ J6   ==>   ( K4 == Q11 )\
	=		\{ Shunting yard \}\
		J6   ==>   ( Q10   ==>   " ( K4 == Q11 ) " )\
	==>		\{ Propositional calculus \}\
		J6   ==>   " ( Q10   ==>    ( Q11   ==>   K4 ) ) "\
	=		\{ Shunting yard \}\
		J6   ==>   ( Q10 /\\ Q11   ==>   K4 )\
	=		\{ Shunting yard \}\
		J6 /\\ Q10 /\\ Q11   ==>   K4\
\
If we put all the implications towards the K propositions together with a disjunction, we will get a conjunction of invariants and programs implying a disjunction of Ks which we can substitute for J6' using (17).\
\
(C)		(18) \\/ (A) \\/ (B) \\/ (20)\
	=		\{ Propositional calculus \}\
\
(To be continued: the Qs should be united in a disjunction)\
\
And now for the preservation of J7.\
\
(23)		J7'\
	=		\{ P2 \}\
		d' = L3.n'.( x <- y )\
	=		\{ Alphabet and distributivity \}\
			( y = word  /\\  d' = L3.n'.( x <- word ) )\
		\\/	( y = op  /\\  d' = L3.n'.( x <- op ) )\
		\\/	( y = bo  /\\  d' = L3.n'.( x <- bo ) )\
		\\/	( y = bc  /\\  d' = L3.n'.( x <- bc ) )\
	=		\{ see below \}\
		K5 \\/ K6 \\/ K7 \\/ K8\
\
K5:	y = word  /\\  d' = L3.n'.( x <- word )\
K6:	y = op  /\\  d' = L3.n'.( x <- op )\
K7:	y = bo  /\\  d' = L3.n'.( x <- bo )\
K8:	y = bc  /\\  d' = L3.n'.( x <- bc )\
\
(24)		K5\
	=		\{ (9) \}\
		y = word  /\\  d' = 
\b false
\b0 \
	=	Q12\
\
(25)		K6\
	=		\{ (10) \}\
		y = op  /\\  d' = ( L3.n'.x \\/ L2.n'.x )\
	=		\{ Q7 \}\
		y = op  /\\  d' = ( L3.n.x \\/ L2.n.x )\
	=		\{ J6 and J7 \}\
		y = op  /\\  d' = ( c \\/ d )\
	=	Q13\
\
(26)		K7\
	=		\{ Q10 heading for (11) \}\
		y = bo  /\\  d' = L3.( n+1 ).( x <- bo )\
	=		\{ (11) \}\
		y = bo  /\\  d' = L3.n.x\
	=		\{ J7 \}\
		y = bo  /\\  d' = d\
	=	Q14\
\
(27)		K8\
	=		\{ (11) \}\
		y = bc /\\ d' = 
\b false
\b0 \
	=	Q15\
\
(28)		J7'\
	=		\{ (17) \}\
		K5 \\/ K6 \\/ K7 \\/ K8\
	=		\{ (24), (25), (26), (27) with assumptions J6, J7, P2, Q7, Q10 \}\
		Q12 \\/ Q13 \\/ Q14 \\/ Q15\
\
We have now the following two conditional statements which we can merge according to (P.7).\
\
Q16:	Q8 \\/ Q6 \\/ Q9 \\/ Q11\
Q17:	Q12 \\/ Q12 \\/ Q13 \\/ Q14 \\/ Q15\
\
}