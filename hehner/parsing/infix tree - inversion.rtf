{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 It would be interesting now to see if any valid syntax tree can be generated by the parser.  This is because we will want to select particular trees later and we don't have enough information to know which one might be of interest.  We defer this decision to later.\
\
To check this property, we will inverse the program.  That way, we will produce a program that takes a tree and writes its linearization.\
\
		( G4 /\\ P5 ) [ s', s  :=   s, s' ]\
	=		\{ Substitution \}	\
		s <- u <- v = def'   /\\   def = s <- btree.u.v\
	=	P14 /\\ G6\
\
		P9 /\\ P10 [ s', s   :=   s, s' ]\
	=		\{ Substitution \}\
		x = x' <- y   /\\   z = w\
	=		\{ Variable decomposition \}\
		x' = v  /\\  x = v <- y  /\\  z = w\
	=	P15 /\\ G7 /\\ G8\
\
		G5 [ s', s   :=   s, s' ]\
	=		\{ Substitution \}\
		y -> w = z'\
	=		\{ G8 \}\
		z' = y -> z\
	=	P16\
\
		( G1 /\\ P7 /\\ P1 ) [ s, s'   :=   s', s ]\
	=		\{ Substitution \}\
		y = word  /\\  c = false  /\\  d' = c\
	=		\{ G8: y = word /\\ c = false; P17 \}\
		G8  /\\  P17\
\
		( G2 /\\ P8 /\\ P2 ) [ s, s'   :=    s', s ]\
	=		\{ Substitution \}\
		y = op  /\\  d = false  /\\  c' = d\
	=		\{ G9: y = op /\\ d = false;  P18:  c' = d \}\
		G9 /\\ P18\
}